                        .module flashthrough.c
                        .area text(rom, con, rel)
 0000                   .dbfile G:\mega48\flashthrough.c
                        .area data(ram, con, rel)
 0000                   .dbfile G:\mega48\flashthrough.c
 0000           _old_PORTC::
 0000                   .blkb 1
                        .area idata
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0001                   .dbfile G:\mega48\flashthrough.c
 0001                   .dbsym e old_PORTC _old_PORTC c
 0001           _countser::
 0001                   .blkb 1
                        .area idata
 0001 00                .byte 0
                        .area data(ram, con, rel)
 0002                   .dbfile G:\mega48\flashthrough.c
 0002                   .dbsym e countser _countser c
                        .area text(rom, con, rel)
 0000                   .dbfile G:\mega48\flashthrough.c
 0000                   .dbfunc e main _main fV
                        .even
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 69
 0000           ; //*************************************************************
 0000           ; //file name: testbench_atmega48_trial1.c
 0000           ; //function: provides test bench for ATMEL AVR ATmega48 controller
 0000           ; //target controller: ATMEL ATmega48
 0000           ; //
 0000           ; //ATMEL AVR ATmega48 Controller Pin Assignments
 0000           ; //Chip Port Function I/O Source/Dest Asserted Notes
 0000           ; //*************************************************************
 0000           ; //Pin 1 Reset
 0000           ; //*************************************************************
 0000           ; //Pin 1 PB0
 0000           ; //Pin 2 PB1
 0000           ; //Pin 3 PB2
 0000           ; //Pin 4 PB3
 0000           ; //Pin 5 PB4 
 0000           ; //Pin 6 PB5 
 0000           ; //Pin 7 PB6 
 0000           ; //Pin 8 PB7 
 0000           ; //Pin 9 Reset
 0000           ; //Pin 10 VDD
 0000           ; //Pin 11 Gnd
 0000           ; //Pin 12 Resonator
 0000           ; //Pin 13 Resonator
 0000           ; //Pin 14 PD0 to tristate LED indicator
 0000           ; //Pin 15 PD1 to tristate LED indicator
 0000           ; //Pin 16 PD2 to tristate LED indicator
 0000           ; //Pin 17 PD3 to tristate LED indicator
 0000           ; //Pin 18 PD4 
 0000           ; //Pin 19 PD5 
 0000           ; //Pin 20 PD6 
 0000           ; //Pin 21 PD7 
 0000           ; //Pin 22 PC0 to active high RC debounced switch
 0000           ; //Pin 23 PC1 to active high RC debounced switch
 0000           ; //Pin 24 PC2 to active high RC debounced switch
 0000           ; //Pin 25 PC3 to active high RC debounced switch
 0000           ; //Pin 26 PC4
 0000           ; //Pin 27 PC5
 0000           ; //Pin 28 PC6
 0000           ; //Pin 29 PC7
 0000           ; //Pin 30 AVcc to VDD
 0000           ; //Pin 31 AGnd to Ground
 0000           ; //Pin 32 ARef to Vcc
 0000           ; //Pin 33 PA7
 0000           ; //Pin 34 PA6
 0000           ; //Pin 35 PA5
 0000           ; //Pin 36 PA4
 0000           ; //Pin 37 PA3
 0000           ; //Pin 38 PA2
 0000           ; //Pin 39 PA1
 0000           ; //Pin 40 PA0
 0000           ; //
 0000           ; //orginal authors: Steven Barrett and Daniel Pack
 0000           ; //modifying author: Barry Blaha
 0000           ; //created: July 12, 2007
 0000           ; //last revised: February 25, 2008
 0000           ; //***************************************************************
 0000           ; //include files**************************************************
 0000           ; #include<iom48v.h>                            //ImageCraft ICC AVR
 0000           ;                                                               //include file
 0000           ; //for ATmega48
 0000           ; //function prototypes********************************************
 0000           ; void initialize_ports(void);  //initializes ports
 0000           ; //main program***************************************************
 0000           ; //global variables
 0000           ; unsigned char old_PORTC = 0x00; //present value of PORTC
 0000           ; unsigned char new_PORTC;              //new values of PORTC
 0000           ; unsigned char countser = 0;           //counter
 0000           ; void main(void)
 0000           ; {
 0000                   .dbline 70
 0000           ; initialize_ports();                   //initialize ports
 0000 2BD0              rcall _initialize_ports
 0002 28C0              rjmp L3
 0004           L2:
 0004                   .dbline 72
 0004           ; 
 0004           ; while(1){
 0004                   .dbline 73
 0004           ;                new_PORTC = PINC;                      //read PORTC
 0004 26B0              in R2,0x6
 0006 20920000          sts _new_PORTC,R2
 000A                   .dbline 74
 000A           ;                if(new_PORTC != old_PORTC){ //process change
 000A 20900000          lds R2,_old_PORTC
 000E 30900000          lds R3,_new_PORTC
 0012 3214              cp R3,R2
 0014 F9F0              breq L5
 0016           X0:
 0016                   .dbline 74
 0016                   .dbline 75
 0016           ;                               PORTD=0x00;
 0016 2224              clr R2
 0018 2BB8              out 0xb,R2
 001A                   .dbline 76
 001A           ;                               countser=0;
 001A 20920100          sts _countser,R2
 001E 05C0              rjmp L8
 0020           L7:
 0020                   .dbline 77
 0020           ;                               while(countser<100){
 0020                   .dbline 78
 0020           ;                                       countser=countser+1;
 0020 80910100          lds R24,_countser
 0024 8F5F              subi R24,255    ; addi 1
 0026 80930100          sts _countser,R24
 002A                   .dbline 79
 002A           ;                               }         
 002A           L8:
 002A                   .dbline 77
 002A 80910100          lds R24,_countser
 002E 8436              cpi R24,100
 0030 B8F3              brlo L7
 0032           X1:
 0032                   .dbline 80
 0032           ;                               PORTD=0xff;
 0032 8FEF              ldi R24,255
 0034 8BB9              out 0xb,R24
 0036                   .dbline 81
 0036           ;                               countser=0;
 0036 2224              clr R2
 0038 20920100          sts _countser,R2
 003C 05C0              rjmp L11
 003E           L10:
 003E                   .dbline 82
 003E           ;                               while(countser<100){
 003E                   .dbline 83
 003E           ;                                       countser=countser+1;
 003E 80910100          lds R24,_countser
 0042 8F5F              subi R24,255    ; addi 1
 0044 80930100          sts _countser,R24
 0048                   .dbline 84
 0048           ;                               }        
 0048           L11:
 0048                   .dbline 82
 0048 80910100          lds R24,_countser
 004C 8436              cpi R24,100
 004E B8F3              brlo L10
 0050           X2:
 0050                   .dbline 85
 0050           ;                               PORTD=0x00;
 0050 2224              clr R2
 0052 2BB8              out 0xb,R2
 0054                   .dbline 86
 0054           ;                }
 0054           L5:
 0054                   .dbline 87
 0054           ;               }
 0054           L3:
 0054                   .dbline 72
 0054 D7CF              rjmp L2
 0056           X3:
 0056                   .dbline -2
 0056           L1:
 0056                   .dbline 0 ; func end
 0056 0895              ret
 0058                   .dbend
 0058                   .dbfunc e initialize_ports _initialize_ports fV
                        .even
 0058           _initialize_ports::
 0058                   .dbline -1
 0058                   .dbline 96
 0058           ; }                                                             //end main
 0058           ; //***************************************************************
 0058           ; //function definitions
 0058           ; //***************************************************************
 0058           ; //***************************************************************
 0058           ; //initialize_ports: provides initial configuration for I/O ports
 0058           ; //***************************************************************
 0058           ; void initialize_ports(void)
 0058           ; {
 0058                   .dbline 98
 0058           ; 
 0058           ; DDRB=0xff;                                            //PORTB as output
 0058 8FEF              ldi R24,255
 005A 84B9              out 0x4,R24
 005C                   .dbline 99
 005C           ; PORTB=0x00;                                           //initialize PORTB low
 005C 2224              clr R2
 005E 25B8              out 0x5,R2
 0060                   .dbline 102
 0060           ;       //PORTB is not being used
 0060           ; 
 0060           ; DDRC=0x00;                                            //PORTC[7:0] as input
 0060 27B8              out 0x7,R2
 0062                   .dbline 103
 0062           ; PORTC=0x00;                                   //disable PORTC
 0062 28B8              out 0x8,R2
 0064                   .dbline 106
 0064           ;       //pull-up resistors
 0064           ; 
 0064           ; DDRD=0xff;                                            //set PORTD as output
 0064 8AB9              out 0xa,R24
 0066                   .dbline 107
 0066           ; PORTD=0xff;                                   //initialize high
 0066 8BB9              out 0xb,R24
 0068                   .dbline -2
 0068           L13:
 0068                   .dbline 0 ; func end
 0068 0895              ret
 006A                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile G:\mega48\flashthrough.c
 0000           _new_PORTC::
 0000                   .blkb 1
 0001                   .dbsym e new_PORTC _new_PORTC c
 0001           ;       //port D is the output port with LEDS
 0001           ; }
 0001           ; //***************************************************************
 0001           ; 
