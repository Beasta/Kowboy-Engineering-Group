//*************************************************************
//file name: testbench_atmega48_trial1.c
//function: provides test bench for ATMEL AVR ATmega48 controller
//target controller: ATMEL ATmega48
//
//ATMEL AVR ATmega48 Controller Pin Assignments
//Chip Port Function I/O Source/Dest Asserted Notes
//*************************************************************
//Pin 1 Reset
//*************************************************************
//Pin 1
//Pin 2 
//Pin 3 
//Pin 4 
//Pin 5 
//Pin 6 
//Pin 7 
//Pin 8 
//Pin 9 
//Pin 10 
//Pin 11 
//Pin 12 
//Pin 13 
//Pin 14 
//Pin 15 
//Pin 16 
//Pin 17 
//Pin 18 
//Pin 19 
//Pin 20 
//Pin 21 
//Pin 22
//Pin 23
//Pin 24 
//Pin 25
//Pin 26 
//Pin 27 
//Pin 28 
//Pin 29 
//Pin 30 
//Pin 31 
//Pin 32 
//Pin 33 
//Pin 34 
//Pin 35 
//Pin 36 
//Pin 37 
//Pin 38 
//Pin 39 
//Pin 40 
//
//orginal authors: Steven Barrett and Daniel Pack
//modifying author: Barry Blaha
//created: July 12, 2007
//last revised: February 25, 2008
//***************************************************************
//include files**************************************************
#include<iom48v.h> 				//ImageCraft ICC AVR
								//include file
//for ATmega48
//function prototypes********************************************
void initialize_ports(void); 	//initializes ports
void USART_init(void);			//initializes USART
unsigned char USART_Receive( void ); //USART Receiver
//main program***************************************************
//global variables
unsigned char old_digital = 0x00; //present value of analog to digital conversion
unsigned char new_digital; 		//new values of analog to digital conversion
void main(void)
{
initialize_ports(); 			//initialize ports
USART_init();					//initialize USART

while(1){//main loop
	new_digital = USART_Receive();//read analog input on PORTC pin0, left justify
	if(new_digital != old_digital){ //process change
		PORTB=new_digital;		//in PORTB input
		//PORTB=new_digital;		//in PORTB input
	  } 						//end if new_digital
		old_digital=new_digital;//update PORTC
	} 							//end while(1)
} 								//end main
//***************************************************************
//function definitions
//***************************************************************
//***************************************************************
//initialize_ports: provides initial configuration for I/O ports
//***************************************************************
void initialize_ports(void)
{

DDRB=0xff;						//PORTB as output
PORTB=0xff;						//initialize PORTB high
	//PORTB is not being used

DDRC=0x00; 						//PORTC[7:0] as input
PORTC=0x00; 					//disable PORTC
	//pull-up resistors

DDRD=0x00; 						//set PORTD as input
PORTD=0x00; 					//disable portD
	//port D is receiving usart on channel 0, pin 2
}
//***************************************************************

//*************************************************************
//USART_init: initializes the USART system
/*********************************************/
void USART_init(void)
{
/*Set baud rate */
UBRR0H = 0x00; 	  	//instead of using ubrr use values from barretts primer example
UBRR0L = 0x40;
/*Enable receiver 0x10=0b00010000*/
UCSR0B = 0x10;
/* 0b00000110=0x06 async,no parity,1 stop bit, 8 bit width. see page 194 of data sheet */
UCSR0C = 0x06;
/*                                    */
UCSR0A = 0x00;
}

/*********************************************/

/*********************************************/
unsigned char USART_Receive( void )
{
/* Wait for data to be received */
while ( !(UCSR0A & (1<<RXC0)) )
;
/* Get and return received data from buffer */
return UDR0;
}
/*********************************************/